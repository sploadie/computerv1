#!/usr/bin/env ruby
require_relative 'parse'
$PRECISION = 0.0001
$VERBOSE   = false
$FRACTION  = false
# $PRECISION = 0.00000001

def abs(n)
  return n < 0 ? n * -1 : n
end

def isqrt (n)
  x = n
  while (abs(x * x - n) > 0.000000000000001)
    x = (x * x + n) / (2 * x)
  end
  return x
end

# b^2 - 4ac
def calculate_discriminant(array)
  return (array[1] * array[1]) - (4 * array[0] * array[2])
end

def first_degree(array)
  return [(array[2] / array[1]) * -1.0]
end

def second_degree(array, discriminant)
  return [(-1 * array[1] + isqrt(discriminant)) / (2 * array[0]), (-1 * array[1] - isqrt(discriminant)) / (2 * array[0])]
end

def second_degree_imaginary(array, discriminant)
  discriminant *= -1
  part1 = (-1 * array[1]) / (2 * array[0])
  part2 = (isqrt(discriminant)) / (2 * array[0])
  if $FRACTION == true
    return [part1.to_r.rationalize($PRECISION).to_s + " + i * " + part2.to_r.rationalize($PRECISION).to_s, part1.to_r.rationalize($PRECISION).to_s + " - i * " + part2.to_r.rationalize($PRECISION).to_s]
  end
  return [part1.to_s + " + i * " + part2.to_s, part1.to_s + " - i * " + part2.to_s]
end

def main(array)
  if (array[0] == 0.0 && array[1] == 0.0 && array[2] == 0.0)
    puts "All real numbers"
    return
  elsif array[0] == 0.0 && array[1] == 0.0
    puts "No real solutions"
    return
  end

  if array[0] == 0.0
    answer = first_degree(array)
    puts "The solution is:"
  else
    discriminant =  calculate_discriminant(array)
    if discriminant < 0.0
      answer = second_degree_imaginary(array, discriminant)
      if answer[0] == answer[1]
        answer.shift
        puts "Discriminant is strictly negative, the complex solution is:"
      else
        puts "Discriminant is strictly negative, the two complex solutions are:"
      end
    elsif discriminant == 0.0
      answer = second_degree(array, discriminant)
      if answer[0] == answer[1]
        answer.shift
        puts "Discriminant is null, the solution is:"
      else
        puts "Discriminant is null, the two complex solutions are:"
      end
    else
      answer = second_degree(array, discriminant)
      if answer[0] == answer[1]
        answer.shift
        puts "Discriminant is strictly positive, the solution is:"
      else
        puts "Discriminant is strictly positive, the two solutions are:"
      end
    end
  end
  answer.each do |val|
    if $FRACTION == true && val.is_a?(Float)
      puts val.to_r.rationalize($PRECISION).to_s
    else
      puts val
    end
  end
end

def print_reduced(polynomial_array)
  reduced_array = polynomial_array.map.with_index do |val, i|
    next if val == 0.0
    val = val.to_i if val == val.to_i.to_f
    val = ''       if val == 1  && i != 0
    val = '-'      if val == -1 && i != 0
    case i
    when 0
      "#{val}"
    when 1
      "#{val}X"
    else
      "#{val}X^#{i}"
    end
  end.compact.reverse
  reduced_string = reduced_array.empty? ? '0' : reduced_array.join(' + ')
  puts "Reduced form: #{reduced_string} = 0"
end

def polynomial_degree(polynomial_array)
  degree = 0
  polynomial_array.each.with_index do |val, i|
    degree = i unless val == 0.0
  end
  return degree
end

while true do
  if ARGV[0] == '-v'
    $VERBOSE = true
    ARGV.shift
    next
  elsif ARGV[0] == '-f'
    $FRACTION = true
    ARGV.shift
    next
  elsif ARGV[0] == '-vf' || ARGV[0] == '-fv'
    $VERBOSE = true
    $FRACTION = true
    ARGV.shift
    next
  end
  break
end

p_array = parse ARGV

print_reduced p_array
degree = polynomial_degree p_array
puts "Polynomial degree: #{degree}"

if degree > 2
  puts "The polynomial degree is stricly greater than 2, I can't solve."
else
  main_array = [0.0, 0.0, 0.0]
  main_array[0] = p_array[2] unless p_array[2].nil?
  main_array[1] = p_array[1] unless p_array[1].nil?
  main_array[2] = p_array[0] unless p_array[0].nil?
  main(main_array)
end