#!/usr/bin/env ruby
require_relative 'parse'

def abs(n)
  return n < 0 ? n * -1 : n
end

def isqrt (n)
  x = n
  while (abs(x * x - n) > 0.001)
    x = (x * x + n) / (2 * x)
  end

  return x
end

# b^2 - 4ac
def calculate_discriminant(array)
  return (array[1] * array[1]) - (4 * array[0] * array[2])
end

def first_degree(array)
  return (array[2] / array[1]) * -1.0
end

def second_degree(array, discriminant)
  return [(-1 * array[1] + isqrt(discriminant)) / (2 * array[0]), (-1 * array[1] - isqrt(discriminant)) / (2 * array[0])]
end

def main(array)
  if array[0] == 0
    print "Polynomial degree: 1\n"
    answer = first_degree(array)
  else
    print "Polynomial degree: 2\n"
    discriminant =  calculate_discriminant(array)
    if discriminant < 0
      print "The discriminant is negative, there are no solutions\n"
      return
    end
    print "Discriminant is strictly positive, the two solutions are:\n"
    answer = second_degree(array, discriminant)
    if answer[0] == answer[1]
      answer.shift
    end
  end

  puts answer.join("\n")
end

if ARGV[0] == '-v'
  $VERBOSE = true
  ARGV.shift
end

perfect_return = parse ARGV

shitty_values = perfect_return.map.with_index do |val, i|
  next if val == 0.0
  if val == val.to_i.to_f
    val = val.to_i
  end
  case i
  when 0
    "#{val}"
  when 1
    "#{val}X"
  else
    "#{val}X^#{i}"
  end
end
puts "Reduced form: #{shitty_values.compact.reverse.join(' + ')} = 0"

main(perfect_return.reverse)